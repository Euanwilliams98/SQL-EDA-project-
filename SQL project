-- The dataset needed to be split in half as it was to big for SQLite 

CREATE TABLE appleStore_description_combined AS

Select * FROM appleStore_description1

UNION ALL

Select * FROM appleStore_description2

UNION ALL

Select * FROM appleStore_description3

UNION ALL

Select * FROM appleStore_description4


** EXPLORATORY DATA ANALYSIS**AppleStore

-- Verifying the count of DISTINCT applications in both tables to confirm the absence of any data gap

SELECT COUNT(DISTINCT id) AS UniqueAppIDs 
FROM AppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIDs
FROM appleStore_description_combined

-- The count of records in both tables is 7197, indicating there is no absence of any missing values.

-- I will be examining key fields to identify any instances of missing data. 

SELECT COUNT(*) AS MissingValues 
FROM AppleStore
WHERE track_name IS null OR user_rating is null OR prime_genre IS NULL

SELECT COUNT(*) AS MissingValues 
FROM appleStore_description_combined
WHERE app_desc IS null 

-- -- Both tables have no missing values, signifying that the dataset is free from data gaps and is considered clean.

-- Finding out the number of apps per genreAppleStore to idenfiy dominatant genres

SELECT prime_genre, COUNT(*) AS NumApps
FROM AppleStore
GROUP BY prime_genre
ORDER BY NumApps DESC

-- Results show that Games, Entertaintment and Education are top 3 genres on the app store

--Get an Overview of the apps' ratings

SELECT min(user_rating) AS MinRating,
       max(user_rating) AS MaxRating,
       avg(user_rating) AS AVGRating
FROM AppleStore

--Get the distribution of app prices

SELECT
(price/ 2) *2 AS PriceBinStart,
((price / 2) *2) +2 AS PriceBinEnd,
COUNT(*) AS NumApps
FROM AppleStore

GROUP BY PriceBinStart
ORDER BY PriceBinStart

**DATA ANALYSIS**

--Determine whether paid apps have higher ratings than free apps

SELECT CASE
          WHEN price > 0 THEN 'Paid'
          ELSE 'Free'
     END as App_Type,
     avg(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY App_Type

-- Comparing the results of these averages, it appears that paid apps have a slightly higher average user rating compared to free apps. 

--Check if apps with more supported languages have higher ratings

SELECT CASE
       WHEN lang_num <10 THEN '<10 languages'
       WHEN lang_num BETWEEN 10 AND 30 THEN '10-30 languages'
       ELSE '>30 languages'
    END AS language_bucket,
    avg(user_rating) AS AVG_Rating
From AppleStore
GROUP By language_bucket
ORDER by AVG_Rating DESC

-- results show that language bucket 10-30 has the highest average, therefore suggesting that the developer doesnt need focus to many languages. 

--Checking genres with low ratings 

SELECT prime_genre,
       avg(user_rating) AS Avg_Rating 
FROM AppleStore
GROUP BY prime_genre
ORDER By avg_Rating ASC

-- Results show the genres Catalogs, Fiance and Book got the lowest ratings by users, suggesting there is a oppuertunity to create an app in this space

--Check if there is correlation between the length of the app description and the user rating

SELECT CASE
           WHEN length(b.app_desc) <500 THEN 'Short'
           WHEN length(b.app_desc) BETWEEN 500 and 1000 THEN 'Medium'
           ELSE 'Long'
       END AS description_length_bucket,
       avg(a.user_rating) AS average_rating


FROM
    AppleStore AS A   
JOIN   

     appleStore_description_combined AS b

ON
    a.id = b.id
    
    GROUP BY description_length_bucket
    ORDER by average_rating DESC
    
-- Results show the longer the description the better the user rating on average
  
 -- List Top Apps by Download Count:

SELECT track_name, prime_genre, rating_count_tot AS downloads
FROM AppleStore
ORDER BY downloads DESC
LIMIT 10;

-- This query compiles a list of the top 10 apps with the highest download counts in each genre. It provides developers with valuable insights into the current trends and popular app categories, potentially sparking inspiration for their next app project.
